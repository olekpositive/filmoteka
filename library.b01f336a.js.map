{"mappings":"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","sources":["src/library.js","src/js/getMoviesById.js"],"sourcesContent":["import './js/getGenreList';\nimport './js/addToLocalStorage';\nimport './js/getMoviesById';\nimport './js/modalWindow';\nimport './js/firebase';\nimport './js/students';\nimport './js/toTopBtn';\nimport './js/darkMode';\n","import axios from 'axios';\nimport { imageExists, getMovieYear } from './exportFunctions';\nimport * as pagination from './pagination';\nimport { onTopScroll } from './toTopBtn';\n\nlet movieID = '';\nconst API_KEY = 'b942b8bf626a04f48b07153a95ee51a0';\nconst loader = document.querySelector('.loader');\nconst watchedBtn = document.querySelector('.watched-list-btn');\nconst queueBtn = document.querySelector('.queue-list-btn');\nconst main = document.querySelector('.main-box');\nconst addToQueue = document.querySelector('.queue-btn');\nconst addToWatched = document.querySelector('.watched-btn');\n\nwatchedBtn.style.backgroundColor = ' #ff6b01';\n\nconst itemsPerPage = 20;\n\nconst getMoviesbyId = async movieID => {\n  loader.style.display = 'block';\n  try {\n    let API_URL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(API_URL);\n    loader.style.display = 'none';\n    loader.style.overflow = 'hidden';\n\n    return response.data;\n  } catch (error) {\n    loader.style.display = 'none';\n    loader.style.overflow = 'hidden';\n    console.error(error);\n  }\n};\n\n//watched\nlet watchedMovies = [];\ngetWatchedMovies();\n\nasync function getWatchedMovies() {\n  queueBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n  watchedBtn.style.backgroundColor = ' #ff6b01';\n  queueBtn.style.backgroundColor = ' transparent';\n  watchedBtn.style.backgroundColor = ' #ff6b01';\n  queueBtn.textContent = `QUEUE`;\n  let totalPages = 0;\n  let currentPage = 1;\n\n  pagination.getPaginationNumbers(totalPages);\n  pagination.setCurrentPage(currentPage);\n\n  if (JSON.parse(localStorage.getItem('added-to-watched')) !== null) {\n    let watchedMoviesNumber = JSON.parse(\n      localStorage.getItem('added-to-watched')\n    ).length;\n\n    if (JSON.parse(localStorage.getItem('added-to-watched')).length === 0) {\n      main.insertAdjacentHTML(\n        'beforeend',\n        `<p class=\"alert\">There are no movies in your watched list!</p>`\n      );\n      watchedBtn.textContent = `WATCHED`;\n      loader.style.display = 'none';\n    } else {\n      main.innerHTML = '';\n      watchedMovies = JSON.parse(localStorage.getItem('added-to-watched'));\n\n      let watchedMoviesList = [];\n      let paginatedList;\n\n      for (let i = 0; i < watchedMovies.length; i++) {\n        let watchedMovieId = watchedMovies[i];\n\n        let watchedMoviesItem = await getMoviesbyId(watchedMovieId);\n\n        watchedMoviesList.push(watchedMoviesItem);\n      }\n\n      totalPages = Math.ceil(watchedMoviesList.length / itemsPerPage);\n\n      paginatedList = watchedMoviesList.slice(\n        (currentPage - 1) * itemsPerPage,\n        currentPage * itemsPerPage\n      );\n      renderMovies(paginatedList);\n\n      pagination.getPaginationNumbers(totalPages);\n      pagination.setCurrentPage(currentPage);\n\n      pagination.prevButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(--currentPage);\n        paginatedList = watchedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      pagination.nextButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(++currentPage);\n        paginatedList = watchedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      document.querySelectorAll('.pagination__number').forEach(button => {\n        const pageIndex = Number(button.getAttribute('page-index'));\n        if (pageIndex) {\n          button.addEventListener('click', async () => {\n            pagination.setCurrentPage(pageIndex);\n            currentPage = pageIndex;\n\n            paginatedList = watchedMoviesList.slice(\n              (currentPage - 1) * itemsPerPage,\n              currentPage * itemsPerPage\n            );\n            main.innerHTML = '';\n\n            renderMovies(paginatedList);\n            onTopScroll();\n          });\n        }\n      });\n\n      watchedBtn.textContent = `WATCHED : ${watchedMoviesNumber}`;\n    }\n  } else {\n    main.insertAdjacentHTML(\n      'beforeend',\n      `<p class=\"alert\">There are no movies in your watched list!</p>`\n    );\n    watchedBtn.textContent = `WATCHED`;\n    loader.style.display = 'none';\n  }\n  watchedBtn.setAttribute('disabled', true);\n}\n\nwatchedBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getWatchedMovies();\n});\n\n//queue\n\nlet queuedMovies = [];\n\nasync function getQueuedMovies() {\n  watchedBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n  watchedBtn.style.backgroundColor = 'transparent';\n  queueBtn.style.backgroundColor = ' #ff6b01';\n  watchedBtn.textContent = `WATCHED`;\n  let totalPages = 0;\n  let currentPage = 1;\n\n  pagination.getPaginationNumbers(totalPages);\n  pagination.setCurrentPage(currentPage);\n\n  if (JSON.parse(localStorage.getItem('added-to-queue')) !== null) {\n    let queuedMoviesNumber = JSON.parse(\n      localStorage.getItem('added-to-queue')\n    ).length;\n\n    if (JSON.parse(localStorage.getItem('added-to-queue')).length === 0) {\n      main.insertAdjacentHTML(\n        'beforeend',\n        `<p class=\"alert\">There are no movies in your queue!</p>`\n      );\n      queueBtn.textContent = `QUEUE`;\n      loader.style.display = 'none';\n    } else {\n      main.innerHTML = '';\n      queuedMovies = JSON.parse(localStorage.getItem('added-to-queue'));\n      let queuedMoviesList = [];\n      let paginatedList;\n\n      for (let i = 0; i < queuedMovies.length; i++) {\n        let queuedMovieId = queuedMovies[i];\n\n        let queuedMoviesItem = await getMoviesbyId(queuedMovieId);\n\n        queuedMoviesList.push(queuedMoviesItem);\n      }\n\n      totalPages = Math.ceil(queuedMoviesList.length / itemsPerPage);\n\n      paginatedList = queuedMoviesList.slice(\n        (currentPage - 1) * itemsPerPage,\n        currentPage * itemsPerPage\n      );\n      renderMovies(paginatedList);\n\n      pagination.getPaginationNumbers(totalPages);\n      pagination.setCurrentPage(currentPage);\n\n      pagination.prevButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(--currentPage);\n        paginatedList = queuedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      pagination.nextButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(++currentPage);\n        paginatedList = queuedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      document.querySelectorAll('.pagination__number').forEach(button => {\n        const pageIndex = Number(button.getAttribute('page-index'));\n        if (pageIndex) {\n          button.addEventListener('click', async () => {\n            pagination.setCurrentPage(pageIndex);\n            currentPage = pageIndex;\n\n            paginatedList = queuedMoviesList.slice(\n              (currentPage - 1) * itemsPerPage,\n              currentPage * itemsPerPage\n            );\n            main.innerHTML = '';\n\n            renderMovies(paginatedList);\n            onTopScroll();\n          });\n        }\n      });\n\n      queueBtn.textContent = `QUEUE : ${queuedMoviesNumber}`;\n    }\n  } else {\n    main.insertAdjacentHTML(\n      'beforeend',\n      `<p class=\"alert\">There are no movies in your queue!</p>`\n    );\n    queueBtn.textContent = `QUEUE`;\n    loader.style.display = 'none';\n  }\n  queueBtn.setAttribute('disabled', true);\n}\n\nqueueBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getQueuedMovies();\n});\n\n//render movies\nfunction renderMovies(movies) {\n  const getSingleMoviesGenre = genres => {\n    let singleMovieGenres = '';\n    genres.map(elem => {\n      elem != genres[genres.length - 1]\n        ? (singleMovieGenres = singleMovieGenres + elem.name + ', ')\n        : (singleMovieGenres = singleMovieGenres + elem.name);\n    });\n    return singleMovieGenres;\n  };\n  const markup = movies\n    .map(movie => {\n      return `\n<div class=\"movie-card\">\n  <img class=\"movie-card__image\" alt=\"${movie.title} movie\"src=${imageExists(\n        'https://image.tmdb.org/t/p/w500',\n        movie.poster_path\n      )}>\n  <div class=\"movie-card__label\">\n    <p class=\"movie-card__title\">${movie.original_title}</p>\n    <div>\n    <span class=\"movie-card__genre-year\"> ${getSingleMoviesGenre(\n      movie.genres\n    )}  | ${getMovieYear(movie.release_date)}</span> \n    <span class=\"movie-card__vote\">${movie.vote_average.toFixed(1)}</span>\n    \n    </div>\n    <p class=\"movie-card__id\">${movie.id}</p> \n  </div>\n</div>\n`;\n    })\n    .join('');\n\n  main.innerHTML += markup;\n}\n\nconst queueRefresh = event => {\n  if (queueBtn.style.backgroundColor !== 'transparent') {\n    queueBtn.removeAttribute('disabled');\n    queueBtn.click();\n  }\n};\nconst watchedRefresh = event => {\n  if (watchedBtn.style.backgroundColor !== 'transparent') {\n    watchedBtn.removeAttribute('disabled');\n    watchedBtn.click();\n  }\n};\n\naddToQueue.addEventListener('click', queueRefresh);\naddToWatched.addEventListener('click', watchedRefresh);\n\n//<p class=\"movie-card__genre-year\">${singleMovieGenres} | ${getMovieYear(\n//movie.release_date\n//)}</p>\n"],"names":["parcelRequire","$2shzp","$f543b6b9e57872fd$var$loader","document","querySelector","$f543b6b9e57872fd$var$watchedBtn","$f543b6b9e57872fd$var$queueBtn","$f543b6b9e57872fd$var$main","$f543b6b9e57872fd$var$addToQueue","$f543b6b9e57872fd$var$addToWatched","style","backgroundColor","$f543b6b9e57872fd$var$itemsPerPage","$f543b6b9e57872fd$var$getMoviesbyId","async","movieID","display","API_URL","response","default","get","overflow","data","error","console","$f543b6b9e57872fd$var$watchedMovies","$f543b6b9e57872fd$var$getWatchedMovies","removeAttribute","innerHTML","textContent","totalPages","currentPage","$2nhTy","getPaginationNumbers","setCurrentPage","JSON","parse","localStorage","getItem","watchedMoviesNumber","length","insertAdjacentHTML","paginatedList","watchedMoviesList","i","watchedMovieId","watchedMoviesItem","push","Math","ceil","slice","$f543b6b9e57872fd$var$renderMovies","prevButton","addEventListener","$hkaSy","onTopScroll","nextButton","querySelectorAll","forEach","button","pageIndex","Number","getAttribute","setAttribute","event","preventDefault","$f543b6b9e57872fd$var$queuedMovies","movies","markup","map","movie","title","$4bJs7","imageExists","poster_path","original_title","genres","singleMovieGenres","elem","name","getSingleMoviesGenre","getMovieYear","release_date","vote_average","toFixed","id","join","queuedMoviesNumber","queuedMoviesList","queuedMovieId","queuedMoviesItem","$f543b6b9e57872fd$var$getQueuedMovies","click"],"version":3,"file":"library.b01f336a.js.map"}