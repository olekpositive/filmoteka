{"mappings":"gfAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,iEAOME,EAASC,SAASC,cAAc,WAChCC,EAAaF,SAASC,cAAc,qBACpCE,EAAWH,SAASC,cAAc,mBAClCG,EAAOJ,SAASC,cAAc,aAC9BI,EAAaL,SAASC,cAAc,cACpCK,EAAeN,SAASC,cAAc,gBAE5CC,EAAWK,MAAMC,gBAAkB,WAEnC,I,EAAMC,EAAe,GAEfC,G,GAAgB,EAAAZ,EAAAa,UAAA,SAAMC,G,IAGpBC,EACEC,EAKCC,E,iEARThB,EAAOQ,MAAMS,QAAU,Q,iBAGJ,O,sBADbH,EAAU,sCAAyDI,OAAnBL,EAAQ,aAAmBK,OAfnE,mCAemE,mBAC9D,C,EAAMC,EAAAP,QAAMQ,IAAIN,I,OAIjC,OAJMC,EAAWM,EAAAC,OACjBtB,EAAOQ,MAAMS,QAAU,OACvBjB,EAAOQ,MAAMe,SAAW,SAExB,C,EAAOR,EAASS,M,cACTR,EAAAK,EAAAC,OACPtB,EAAOQ,MAAMS,QAAU,OACvBjB,EAAOQ,MAAMe,SAAW,SACxBE,QAAQT,MAAMA,G,0BAElB,I,SAd4BH,G,iCAiBxBa,EAAgB,G,SAGLC,I,OAAAC,EAAAC,MAAAC,KAAAC,U,UAAAH,I,OAAAA,GAAf,EAAA7B,EAAAa,UAAA,W,IAOMoB,EACAC,EAMEC,EAeEC,EACAC,EAEKC,EACHC,EAEAC,E,wEAlCVnC,EAASoC,gBAAgB,YACzBnC,EAAKoC,UAAY,GACjBtC,EAAWK,MAAMC,gBAAkB,WACnCL,EAASI,MAAMC,gBAAkB,eACjCN,EAAWK,MAAMC,gBAAkB,WACnCL,EAASsC,YAAe,QACpBV,EAAa,EACbC,EAAc,EAElBU,EAAAC,qBAAgCZ,GAChCW,EAAAE,eAA0BZ,GAEmC,OAAzDa,KAAKC,MAAMC,aAAaC,QAAQ,qBAAhC,C,MACEf,EAAsBY,KAAKC,MAC7BC,aAAaC,QAAQ,qBACrBC,OAEkE,IAAhEJ,KAAKC,MAAMC,aAAaC,QAAQ,qBAAqBC,OAArD,C,MACF7C,EAAK8C,mBACH,YACC,kEAEHhD,EAAWuC,YAAe,UAC1B1C,EAAOQ,MAAMS,QAAU,O,eAEvBZ,EAAKoC,UAAY,GACjBf,EAAgBoB,KAAKC,MAAMC,aAAaC,QAAQ,qBAE5Cd,EAAA,GAGKE,EAAI,E,wBAAGA,EAAIX,EAAcwB,QAC5BZ,EAAiBZ,EAAcW,GAEX,C,EAAM1B,EAAc2B,KAHP,C,YAGjCC,EAAoBlB,EAAAC,OAExBa,EAAkBiB,KAAKb,G,wBALiBF,I,aAQ1CL,EAAaqB,KAAKC,KAAKnB,EAAkBe,OAASxC,GAMlD6C,EAJAnB,EAAgBD,EAAkBqB,OAC/BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,IAIhBiC,EAAAC,qBAAgCZ,GAChCW,EAAAE,eAA0BZ,GAE1BU,EAAAc,WAAsBC,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC9C+B,EAAAE,iBAA4BZ,GAC5BG,EAAgBD,EAAkBqB,OAC/BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GACjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,KACAjB,EAAAkB,WAAsBH,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC9C+B,EAAAE,iBAA4BZ,GAC5BG,EAAgBD,EAAkBqB,OAC/BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GACjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,KACA3D,SAAS6D,iBAAiB,uBAAuBC,SAAQ,SAAAC,GACvD,IAAMC,EAAYC,OAAOF,EAAOG,aAAa,eACzCF,GACFD,EAAON,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC/B+B,EAAAE,eAA0BoB,GAC1BhC,EAAcgC,EAEd7B,EAAgBD,EAAkBqB,OAC/BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GAEjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,IAEJ,IAEAzD,EAAWuC,YAAc,aAAiCxB,OAApBgB,G,oCAGxC7B,EAAK8C,mBACH,YACC,kEAEHhD,EAAWuC,YAAe,UAC1B1C,EAAOQ,MAAMS,QAAU,O,wBAEzBd,EAAWiE,aAAa,YAAY,G,OACtC,KArGevC,MAAAC,KAAAC,U,CAFfJ,IAyGAxB,EAAWuD,iBAAiB,SAAS,SAAAW,GACnCA,EAAMC,iBACN3C,GACF,IAIA,IAAI4C,EAAe,G,SAEJC,I,OAAAA,GAAf,EAAAzE,EAAAa,UAAA,W,IAMMoB,EACAC,EAMEwC,EAcEC,EACAtC,EAEKC,EACHsC,EAEAC,E,wEAhCVzE,EAAWqC,gBAAgB,YAC3BnC,EAAKoC,UAAY,GACjBtC,EAAWK,MAAMC,gBAAkB,cACnCL,EAASI,MAAMC,gBAAkB,WACjCN,EAAWuC,YAAe,UACtBV,EAAa,EACbC,EAAc,EAElBU,EAAAC,qBAAgCZ,GAChCW,EAAAE,eAA0BZ,GAEiC,OAAvDa,KAAKC,MAAMC,aAAaC,QAAQ,mBAAhC,C,MACEwB,EAAqB3B,KAAKC,MAC5BC,aAAaC,QAAQ,mBACrBC,OAEgE,IAA9DJ,KAAKC,MAAMC,aAAaC,QAAQ,mBAAmBC,OAAnD,C,MACF7C,EAAK8C,mBACH,YACC,2DAEH/C,EAASsC,YAAe,QACxB1C,EAAOQ,MAAMS,QAAU,O,eAEvBZ,EAAKoC,UAAY,GACjB8B,EAAezB,KAAKC,MAAMC,aAAaC,QAAQ,mBAC3CyB,EAAA,GAGKrC,EAAI,E,wBAAGA,EAAIkC,EAAarB,QAC3ByB,EAAgBJ,EAAalC,GAEV,C,EAAM1B,EAAcgE,KAHP,C,YAGhCC,EAAmBvD,EAAAC,OAEvBoD,EAAiBtB,KAAKwB,G,wBALiBvC,I,aAQzCL,EAAaqB,KAAKC,KAAKoB,EAAiBxB,OAASxC,GAMjD6C,EAJAnB,EAAgBsC,EAAiBlB,OAC9BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,IAIhBiC,EAAAC,qBAAgCZ,GAChCW,EAAAE,eAA0BZ,GAE1BU,EAAAc,WAAsBC,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC9C+B,EAAAE,iBAA4BZ,GAC5BG,EAAgBsC,EAAiBlB,OAC9BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GACjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,KACAjB,EAAAkB,WAAsBH,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC9C+B,EAAAE,iBAA4BZ,GAC5BG,EAAgBsC,EAAiBlB,OAC9BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GACjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,KACA3D,SAAS6D,iBAAiB,uBAAuBC,SAAQ,SAAAC,GACvD,IAAMC,EAAYC,OAAOF,EAAOG,aAAa,eACzCF,GACFD,EAAON,iBAAiB,SAAS,EAAA3D,EAAAa,UAAA,W,iDAC/B+B,EAAAE,eAA0BoB,GAC1BhC,EAAcgC,EAEd7B,EAAgBsC,EAAiBlB,OAC9BvB,EAAc,GAAKvB,EACpBuB,EAAcvB,GAEhBL,EAAKoC,UAAY,GAEjBc,EAAanB,IACb,EAAAuB,EAAAC,e,MACF,IAEJ,IAEAxD,EAASsC,YAAc,WAA8BxB,OAAnBuD,G,oCAGpCpE,EAAK8C,mBACH,YACC,2DAEH/C,EAASsC,YAAe,QACxB1C,EAAOQ,MAAMS,QAAU,O,wBAEzBb,EAASgE,aAAa,YAAY,G,OACpC,KAnGevC,MAAAC,KAAAC,U,CA2Gf,SAASwB,EAAasB,GACpB,IASMC,EAASD,EACZE,KAAI,SAAAC,GACH,MAAO,qEAEoD9D,OAAzB8D,EAAMC,MAAM,eAKjB/D,QAL8B,EAAAgE,EAAAC,aACzD,kCACAH,EAAMI,aACN,2EAIoClE,OAFT8D,EAAMK,eAAe,+DAI5CnE,QAtBmBoE,EAqBzBN,EAAMM,OApBJC,EAAoB,GACxBD,EAAOP,KAAI,SAAAS,GACTA,GAAQF,EAAOA,EAAOpC,OAAS,GAC1BqC,EAAoBA,EAAoBC,EAAKC,KAAO,KACpDF,GAAwCC,EAAKC,IACpD,IACOF,GAeL,QAC+BrE,QADzB,EAAAgE,EAAAQ,cAAaV,EAAMW,cAAc,iDAIbzE,OAHK8D,EAAMY,aAAaC,QAAQ,GAAG,6DAG1B3E,OAAT8D,EAAMc,GAAG,6BA1BV,IAAAR,EACvBC,CA6BJ,IACCQ,KAAK,IAER1F,EAAKoC,WAAaqC,CACpB,CAzCA1E,EAASsD,iBAAiB,SAAS,SAAAW,GACjCA,EAAMC,iB,WAtGOE,EAAA3C,MAAAC,KAAAC,U,CAuGbiE,EACF,IAqDA1F,EAAWoD,iBAAiB,SAbP,SAAAW,GACoB,gBAAnCjE,EAASI,MAAMC,kBACjBL,EAASoC,gBAAgB,YACzBpC,EAAS6F,QAEb,IASA1F,EAAamD,iBAAiB,SARP,SAAAW,GACoB,gBAArClE,EAAWK,MAAMC,kBACnBN,EAAWqC,gBAAgB,YAC3BrC,EAAW8F,QAEf,I","sources":["src/library.js","src/js/getMoviesById.js"],"sourcesContent":["import './js/getGenreList';\nimport './js/addToLocalStorage';\nimport './js/getMoviesById';\nimport './js/modalWindow';\nimport './js/firebase';\nimport './js/students';\nimport './js/toTopBtn';\nimport './js/darkMode';\n","import axios from 'axios';\nimport { imageExists, getMovieYear } from './exportFunctions';\nimport * as pagination from './pagination';\nimport { onTopScroll } from './toTopBtn';\n\nlet movieID = '';\nconst API_KEY = 'b942b8bf626a04f48b07153a95ee51a0';\nconst loader = document.querySelector('.loader');\nconst watchedBtn = document.querySelector('.watched-list-btn');\nconst queueBtn = document.querySelector('.queue-list-btn');\nconst main = document.querySelector('.main-box');\nconst addToQueue = document.querySelector('.queue-btn');\nconst addToWatched = document.querySelector('.watched-btn');\n\nwatchedBtn.style.backgroundColor = ' #ff6b01';\n\nconst itemsPerPage = 20;\n\nconst getMoviesbyId = async movieID => {\n  loader.style.display = 'block';\n  try {\n    let API_URL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(API_URL);\n    loader.style.display = 'none';\n    loader.style.overflow = 'hidden';\n\n    return response.data;\n  } catch (error) {\n    loader.style.display = 'none';\n    loader.style.overflow = 'hidden';\n    console.error(error);\n  }\n};\n\n//watched\nlet watchedMovies = [];\ngetWatchedMovies();\n\nasync function getWatchedMovies() {\n  queueBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n  watchedBtn.style.backgroundColor = ' #ff6b01';\n  queueBtn.style.backgroundColor = ' transparent';\n  watchedBtn.style.backgroundColor = ' #ff6b01';\n  queueBtn.textContent = `QUEUE`;\n  let totalPages = 0;\n  let currentPage = 1;\n\n  pagination.getPaginationNumbers(totalPages);\n  pagination.setCurrentPage(currentPage);\n\n  if (JSON.parse(localStorage.getItem('added-to-watched')) !== null) {\n    let watchedMoviesNumber = JSON.parse(\n      localStorage.getItem('added-to-watched')\n    ).length;\n\n    if (JSON.parse(localStorage.getItem('added-to-watched')).length === 0) {\n      main.insertAdjacentHTML(\n        'beforeend',\n        `<p class=\"alert\">There are no movies in your watched list!</p>`\n      );\n      watchedBtn.textContent = `WATCHED`;\n      loader.style.display = 'none';\n    } else {\n      main.innerHTML = '';\n      watchedMovies = JSON.parse(localStorage.getItem('added-to-watched'));\n\n      let watchedMoviesList = [];\n      let paginatedList;\n\n      for (let i = 0; i < watchedMovies.length; i++) {\n        let watchedMovieId = watchedMovies[i];\n\n        let watchedMoviesItem = await getMoviesbyId(watchedMovieId);\n\n        watchedMoviesList.push(watchedMoviesItem);\n      }\n\n      totalPages = Math.ceil(watchedMoviesList.length / itemsPerPage);\n\n      paginatedList = watchedMoviesList.slice(\n        (currentPage - 1) * itemsPerPage,\n        currentPage * itemsPerPage\n      );\n      renderMovies(paginatedList);\n\n      pagination.getPaginationNumbers(totalPages);\n      pagination.setCurrentPage(currentPage);\n\n      pagination.prevButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(--currentPage);\n        paginatedList = watchedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      pagination.nextButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(++currentPage);\n        paginatedList = watchedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      document.querySelectorAll('.pagination__number').forEach(button => {\n        const pageIndex = Number(button.getAttribute('page-index'));\n        if (pageIndex) {\n          button.addEventListener('click', async () => {\n            pagination.setCurrentPage(pageIndex);\n            currentPage = pageIndex;\n\n            paginatedList = watchedMoviesList.slice(\n              (currentPage - 1) * itemsPerPage,\n              currentPage * itemsPerPage\n            );\n            main.innerHTML = '';\n\n            renderMovies(paginatedList);\n            onTopScroll();\n          });\n        }\n      });\n\n      watchedBtn.textContent = `WATCHED : ${watchedMoviesNumber}`;\n    }\n  } else {\n    main.insertAdjacentHTML(\n      'beforeend',\n      `<p class=\"alert\">There are no movies in your watched list!</p>`\n    );\n    watchedBtn.textContent = `WATCHED`;\n    loader.style.display = 'none';\n  }\n  watchedBtn.setAttribute('disabled', true);\n}\n\nwatchedBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getWatchedMovies();\n});\n\n//queue\n\nlet queuedMovies = [];\n\nasync function getQueuedMovies() {\n  watchedBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n  watchedBtn.style.backgroundColor = 'transparent';\n  queueBtn.style.backgroundColor = ' #ff6b01';\n  watchedBtn.textContent = `WATCHED`;\n  let totalPages = 0;\n  let currentPage = 1;\n\n  pagination.getPaginationNumbers(totalPages);\n  pagination.setCurrentPage(currentPage);\n\n  if (JSON.parse(localStorage.getItem('added-to-queue')) !== null) {\n    let queuedMoviesNumber = JSON.parse(\n      localStorage.getItem('added-to-queue')\n    ).length;\n\n    if (JSON.parse(localStorage.getItem('added-to-queue')).length === 0) {\n      main.insertAdjacentHTML(\n        'beforeend',\n        `<p class=\"alert\">There are no movies in your queue!</p>`\n      );\n      queueBtn.textContent = `QUEUE`;\n      loader.style.display = 'none';\n    } else {\n      main.innerHTML = '';\n      queuedMovies = JSON.parse(localStorage.getItem('added-to-queue'));\n      let queuedMoviesList = [];\n      let paginatedList;\n\n      for (let i = 0; i < queuedMovies.length; i++) {\n        let queuedMovieId = queuedMovies[i];\n\n        let queuedMoviesItem = await getMoviesbyId(queuedMovieId);\n\n        queuedMoviesList.push(queuedMoviesItem);\n      }\n\n      totalPages = Math.ceil(queuedMoviesList.length / itemsPerPage);\n\n      paginatedList = queuedMoviesList.slice(\n        (currentPage - 1) * itemsPerPage,\n        currentPage * itemsPerPage\n      );\n      renderMovies(paginatedList);\n\n      pagination.getPaginationNumbers(totalPages);\n      pagination.setCurrentPage(currentPage);\n\n      pagination.prevButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(--currentPage);\n        paginatedList = queuedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      pagination.nextButton.addEventListener('click', async () => {\n        pagination.setCurrentPage(++currentPage);\n        paginatedList = queuedMoviesList.slice(\n          (currentPage - 1) * itemsPerPage,\n          currentPage * itemsPerPage\n        );\n        main.innerHTML = '';\n        renderMovies(paginatedList);\n        onTopScroll();\n      });\n      document.querySelectorAll('.pagination__number').forEach(button => {\n        const pageIndex = Number(button.getAttribute('page-index'));\n        if (pageIndex) {\n          button.addEventListener('click', async () => {\n            pagination.setCurrentPage(pageIndex);\n            currentPage = pageIndex;\n\n            paginatedList = queuedMoviesList.slice(\n              (currentPage - 1) * itemsPerPage,\n              currentPage * itemsPerPage\n            );\n            main.innerHTML = '';\n\n            renderMovies(paginatedList);\n            onTopScroll();\n          });\n        }\n      });\n\n      queueBtn.textContent = `QUEUE : ${queuedMoviesNumber}`;\n    }\n  } else {\n    main.insertAdjacentHTML(\n      'beforeend',\n      `<p class=\"alert\">There are no movies in your queue!</p>`\n    );\n    queueBtn.textContent = `QUEUE`;\n    loader.style.display = 'none';\n  }\n  queueBtn.setAttribute('disabled', true);\n}\n\nqueueBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getQueuedMovies();\n});\n\n//render movies\nfunction renderMovies(movies) {\n  const getSingleMoviesGenre = genres => {\n    let singleMovieGenres = '';\n    genres.map(elem => {\n      elem != genres[genres.length - 1]\n        ? (singleMovieGenres = singleMovieGenres + elem.name + ', ')\n        : (singleMovieGenres = singleMovieGenres + elem.name);\n    });\n    return singleMovieGenres;\n  };\n  const markup = movies\n    .map(movie => {\n      return `\n<div class=\"movie-card\">\n  <img class=\"movie-card__image\" alt=\"${movie.title} movie\"src=${imageExists(\n        'https://image.tmdb.org/t/p/w500',\n        movie.poster_path\n      )}>\n  <div class=\"movie-card__label\">\n    <p class=\"movie-card__title\">${movie.original_title}</p>\n    <div>\n    <span class=\"movie-card__genre-year\"> ${getSingleMoviesGenre(\n      movie.genres\n    )}  | ${getMovieYear(movie.release_date)}</span> \n    <span class=\"movie-card__vote\">${movie.vote_average.toFixed(1)}</span>\n    \n    </div>\n    <p class=\"movie-card__id\">${movie.id}</p> \n  </div>\n</div>\n`;\n    })\n    .join('');\n\n  main.innerHTML += markup;\n}\n\nconst queueRefresh = event => {\n  if (queueBtn.style.backgroundColor !== 'transparent') {\n    queueBtn.removeAttribute('disabled');\n    queueBtn.click();\n  }\n};\nconst watchedRefresh = event => {\n  if (watchedBtn.style.backgroundColor !== 'transparent') {\n    watchedBtn.removeAttribute('disabled');\n    watchedBtn.click();\n  }\n};\n\naddToQueue.addEventListener('click', queueRefresh);\naddToWatched.addEventListener('click', watchedRefresh);\n\n//<p class=\"movie-card__genre-year\">${singleMovieGenres} | ${getMovieYear(\n//movie.release_date\n//)}</p>\n"],"names":["parcelRequire","$7pbsT","$c581f0284ec1c973$var$loader","document","querySelector","$c581f0284ec1c973$var$watchedBtn","$c581f0284ec1c973$var$queueBtn","$c581f0284ec1c973$var$main","$c581f0284ec1c973$var$addToQueue","$c581f0284ec1c973$var$addToWatched","style","backgroundColor","$c581f0284ec1c973$var$itemsPerPage","$c581f0284ec1c973$var$getMoviesbyId","default","movieID","API_URL","response","error","display","concat","$dIxxU","get","_state","sent","overflow","data","console","$c581f0284ec1c973$var$watchedMovies","$c581f0284ec1c973$var$getWatchedMovies","$c581f0284ec1c973$var$_getWatchedMovies","apply","this","arguments","totalPages","currentPage","watchedMoviesNumber","watchedMoviesList","paginatedList","i","watchedMovieId","watchedMoviesItem","removeAttribute","innerHTML","textContent","$jcFG7","getPaginationNumbers","setCurrentPage","JSON","parse","localStorage","getItem","length","insertAdjacentHTML","push","Math","ceil","$c581f0284ec1c973$var$renderMovies","slice","prevButton","addEventListener","$dEmTs","onTopScroll","nextButton","querySelectorAll","forEach","button","pageIndex","Number","getAttribute","setAttribute","event","preventDefault","$c581f0284ec1c973$var$queuedMovies","$c581f0284ec1c973$var$_getQueuedMovies","queuedMoviesNumber","queuedMoviesList","queuedMovieId","queuedMoviesItem","movies","markup","map","movie","title","$e4Itz","imageExists","poster_path","original_title","genres","singleMovieGenres","elem","name","getMovieYear","release_date","vote_average","toFixed","id","join","$c581f0284ec1c973$var$getQueuedMovies","click"],"version":3,"file":"library.e101b8a7.js.map"}